[
  {
    "user_query": "Necesito saber para cada producto su nombre, su precio de lista, su coste, su categoría y subcategoría, y escala de precios al que pertenece, ordenado por categoría y subcategoría.",
    "sql_query": "SELECT\n  COALESCE(spanish_product_name, english_product_name) AS producto,\n  list_price AS precio_de_lista,\n  standard_cost AS coste_estandar,\n  spanish_product_category_name AS categoria,\n  spanish_product_subcategory_name AS subcategoria,\n  CASE\n    WHEN list_price >= 1000 THEN 'Premium'\n    WHEN list_price >= 200 AND list_price < 1000 THEN 'Estándar'\n    ELSE 'Económico'\n  END AS escala_precios\nFROM\n  sales.dim_product\nORDER BY\n  product_category,\n  product_subcategory;",
    "language": "ES"
  },
  {
    "user_query": "Dame el importe de ventas de cada categoría de producto para la unidad de negocio B2C del año actual. Añade el margen bruto y el porcentaje de margen bruto de cada categoría.",
    "sql_query": "SELECT\n  COALESCE(dp.spanish_product_category_name, dp.english_product_category_name) AS categoria_producto,\n  SUM(fs.sales_amount) AS total_ventas_netas,\n  SUM(fs.sales_amount - fs.total_product_cost) AS margen_bruto,\n  (SUM(fs.sales_amount - fs.total_product_cost) / NULLIF(SUM(fs.sales_amount), 0)) * 100 AS margen_bruto_procentaje\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_product dp ON fs.product_key = dp.product_key\nWHERE\n  EXTRACT(YEAR FROM fs.order_date) = EXTRACT(YEAR FROM CURRENT_DATE)\n  AND fs.sale_source = 'internet_sales'\nGROUP BY\n  categoria_producto\nORDER BY\n  total_ventas_netas DESC;",
    "language": "ES"
  },
  {
    "user_query": "Muéstrame el valor de ticket medio mensual para las ventas a distribuidores en lo que va del año.",
    "sql_query": "SELECT\n  EXTRACT(MONTH FROM order_date) AS mes,\n  SUM(sales_amount) / COUNT(DISTINCT sales_order_number) AS ticket_medio\nFROM\n  sales.fact_sales\nWHERE\n  sale_source = 'reseller_sales'\n  AND order_date BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE\nGROUP BY\n  EXTRACT(MONTH FROM order_date);",
    "language": "ES"
  },
  {
    "user_query": "Quiero saber el descuento medio aplicado en las ventas mayoristas del semestre pasado, expresado en porcentaje.",
    "sql_query": "SELECT\n  (SUM(discount_amount) / NULLIF(SUM(extended_amount), 0)) * 100 AS descuento_medio_pct\nFROM\n  sales.fact_sales\nWHERE\n  sale_source = 'reseller_sales'\n  AND (\n    (\n      EXTRACT(MONTH FROM CURRENT_DATE) > 6\n      AND EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE)\n      AND EXTRACT(MONTH FROM order_date) BETWEEN 1 AND 6\n    )\n    OR\n    (\n      EXTRACT(MONTH FROM CURRENT_DATE) <= 6\n      AND EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1\n      AND EXTRACT(MONTH FROM order_date) BETWEEN 7 AND 12\n    )\n  );",
    "language": "ES"
  },
  {
    "user_query": "Enumera los 10 productos más vendidos en el último año. Muestra el nombre del producto, su categoría y subcategoría, el importe de las ventas, la cantidad vendida, y el precio medio por unidad.",
    "sql_query": "SELECT\n  COALESCE(dp.spanish_product_name, dp.english_product_name) AS producto,\n  dp.spanish_product_category_name AS categoria,\n  dp.spanish_product_subcategory_name AS subcategoria,\n  SUM(fs.sales_amount) AS importe,\n  SUM(fs.order_quantity) AS cantidad,\n  SUM(fs.sales_amount) / NULLIF(SUM(fs.order_quantity), 0) AS precio_medio\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_product dp ON fs.product_key = dp.product_key\nWHERE\n  EXTRACT(YEAR FROM fs.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1\nGROUP BY\n  producto, categoria, subcategoria\nORDER BY\n  cantidad DESC\nLIMIT 10;",
    "language": "ES"
  },
  {
    "user_query": "Muestra un listado de los últimos 20 clientes que han comprado y su segmento de ingresos y de estilo de vida.",
    "sql_query": "WITH\n  customer_last_order AS (\n    SELECT\n      customer_key,\n      MAX(sales_order_number) AS bigger_sales_order_number,\n      MAX(order_date) AS last_order_date\n    FROM\n      sales.fact_sales\n    WHERE\n      order_date <= CURRENT_DATE\n    GROUP BY\n      customer_key\n  )\n\nSELECT\n  dc.customer_full_name AS cliente,\n  dc.yearly_income AS ingresos_anuales,\n  dc.house_owner AS propiertarios,\n  dc.number_children_at_home AS hijos_viviendo_en_casa,\n  CASE\n    WHEN dc.yearly_income >= 100000 THEN 'Alto Valor'\n    WHEN dc.yearly_income >= 50000 AND dc.yearly_income < 100000 THEN 'Valor Medio'\n    ELSE 'Valor Básico'\n  END AS segmento_ingresos,\n  CASE\n    WHEN dc.house_owner = TRUE AND dc.number_children_at_home > 0 THEN 'Familia Propietaria'\n    WHEN dc.house_owner = TRUE AND dc.number_children_at_home = 0 THEN 'Propietario Sin Hijos'\n    WHEN dc.house_owner = FALSE AND dc.number_children_at_home > 0 THEN 'Familia Inquilina'\n    ELSE 'Inquilino Sin Hijos'\n  END AS segmento_estilo_vida\nFROM\n  sales.dim_customer dc\n  JOIN customer_last_order clo ON dc.customer_key = clo.customer_key\nORDER BY\n  clo.last_order_date, clo.bigger_sales_order_number DESC\nLIMIT 20;",
    "language": "ES"
  },
  {
    "user_query": "Calcula el importe comprado por cada uno de los clientes con altos ingresos en lo que va del mes.",
    "sql_query": "SELECT\n  dc.customer_full_name AS cliente,\n  SUM(fs.sales_amount) AS importe\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_customer dc ON fs.customer_key = dc.customer_key\nWHERE\n  fs.sale_source = 'internet_sales'\n  AND dc.yearly_income >= 100000\n  AND order_date BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE\nGROUP BY\n  cliente\nORDER BY\n  importe DESC;",
    "language": "ES"
  },
  {
    "user_query": "Para cada categoría de producto, compara las ventas del primer semestre de este año con las del año anterior. Muestrame un detalle mes a mes, indicando los valores, y la diferencia porcentual.",
    "sql_query": "WITH \n  sales_current AS (\n    SELECT\n      dp.spanish_product_category_name AS category_name,\n      date_trunc('month', fs.order_date) AS month,\n      SUM(fs.sales_amount) AS total_sales\n    FROM\n      sales.fact_sales fs\n      JOIN sales.dim_product dp ON fs.product_key = dp.product_key\n    WHERE \n      fs.order_date >= date_trunc('year', CURRENT_DATE)\n      AND fs.order_date < date_trunc('year', CURRENT_DATE) + interval '6 months'\n    GROUP BY\n      category_name, month\n  ),\n  sales_last AS (\n    SELECT\n      dp.spanish_product_category_name AS category_name,\n      date_trunc('month', fs.order_date) AS month,\n      SUM(fs.sales_amount) AS total_sales\n    FROM\n      sales.fact_sales fs\n      JOIN sales.dim_product dp ON fs.product_key = dp.product_key\n    WHERE\n      fs.order_date >= date_trunc('year', CURRENT_DATE - interval '1 year')\n      AND fs.order_date < date_trunc('year', CURRENT_DATE - interval '1 year') + interval '6 months'\n    GROUP BY\n      category_name, month\n  )\n\nSELECT\n  COALESCE(sc.category_name, sl.category_name) AS categoria,\n  TO_CHAR(CURRENT_DATE, 'YYYY-') || TO_CHAR(COALESCE(sc.month, sl.month), 'MM') AS año_mes,\n  COALESCE(sc.total_sales, 0) AS año_en_curso_S1,\n  COALESCE(sl.total_sales, 0) AS año_pasado_H1,\n  ROUND(100 * (COALESCE(sc.total_sales, 0) - sl.total_sales) / NULLIF(sl.total_sales, 0), 2) AS dif_pct\nFROM\n  sales_current sc\n  FULL OUTER JOIN sales_last sl ON \n    sc.category_name = sl.category_name\n    AND EXTRACT(MONTH FROM sc.month) = EXTRACT(MONTH FROM sl.month)\nORDER BY\n  categoria, año_mes;",
    "language": "ES"
  },
  {
    "user_query": "Hazme un ranking de los 3 motivos de venta más comunes para las ventas minoristas.",
    "sql_query": "SELECT\n  RANK() OVER (ORDER BY COUNT(fisr.sales_reason_key) DESC) AS rank,\n  dsr.sales_reason_name,\n  COUNT(fisr.sales_reason_key) AS reason_count\nFROM\n  sales.fact_internet_sales_reason fisr\n  JOIN sales.dim_sales_reason dsr ON fisr.sales_reason_key = dsr.sales_reason_key\n  JOIN sales.fact_sales fs ON fisr.sales_order_number = fs.sales_order_number AND fisr.sales_order_line_number = fs.sales_order_line_number\nWHERE\n  fs.sale_source = 'internet_sales'\nGROUP BY\n  dsr.sales_reason_name\nORDER BY\n  reason_count DESC\nLIMIT 3;",
    "language": "ES"
  },
  {
    "user_query": "Para cada promoción, calcula la cantidad de unidades vendidas y el importe de descuento sobre las ventas del segundo trimestre de este año. Muestra la promoción, su tipo y categoría. ",
    "sql_query": "SELECT\n  dp.spanish_promotion_name AS promocion_nombre,\n  dp.spanish_promotion_type AS promocion_tipo,\n  dp.spanish_promotion_category AS promocion_categoria,\n  SUM(fs.order_quantity) AS cantidad_vendida,\n  SUM(fs.discount_amount) AS descuento_realizado\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_promotion dp ON fs.promotion_key = dp.promotion_key\nWHERE\n  COALESCE(dp.discount_pct, 0) > 0\n  AND order_date >= DATE_TRUNC('year', CURRENT_DATE) + interval '3 months'\n  AND order_date < DATE_TRUNC('year', CURRENT_DATE) + interval '6 months'\nGROUP BY\n  dp.spanish_promotion_name, dp.spanish_promotion_type, dp.spanish_promotion_category\nORDER BY\n  descuento_realizado DESC;",
    "language": "ES"
  },
  {
    "user_query": "Muéstrame los 10 productos más vendidos para el B2B en el último trimestre, excluyendo los Accesorios. Mes a mes indica cuántas unidades se vendieron, y muestra también a qué categoría y subcategoría pertenecen.",
    "sql_query": "WITH \n  last_quarter AS (\n    SELECT\n      fs.product_key,\n      COALESCE(dp.spanish_product_name, dp.english_product_name) AS product_name,\n      dp.spanish_product_category_name,\n      dp.spanish_product_subcategory_name,\n      EXTRACT(MONTH FROM fs.order_date) AS month_in_quarter,\n      fs.order_quantity\n    FROM\n      sales.fact_sales fs\n      JOIN sales.dim_product dp ON fs.product_key = dp.product_key\n    WHERE\n      fs.sale_source = 'reseller_sales'\n      AND dp.spanish_product_category_name <> 'Accesorio'\n      AND fs.order_date >= date_trunc('quarter', CURRENT_DATE - interval '3 months')\n      AND fs.order_date < date_trunc('quarter', CURRENT_DATE)\n  ),\n  top_products AS (\n    SELECT\n      product_key,\n      product_name,\n      spanish_product_category_name,\n      spanish_product_subcategory_name,\n      SUM(order_quantity) AS total_qty\n    FROM\n      last_quarter\n    GROUP BY\n      product_key, product_name, spanish_product_category_name, spanish_product_subcategory_name\n    ORDER BY\n      total_qty DESC\n    LIMIT 10\n  )\n\nSELECT\n  tp.product_name AS producto,\n  tp.spanish_product_category_name AS categoria,\n  tp.spanish_product_subcategory_name AS subcategoria,\n  SUM(lq.order_quantity) FILTER (WHERE lq.month_in_quarter = EXTRACT(MONTH FROM date_trunc('quarter', CURRENT_DATE - interval '3 months'))) AS primer_mes,\n  SUM(lq.order_quantity) FILTER (WHERE lq.month_in_quarter = EXTRACT(MONTH FROM date_trunc('quarter', CURRENT_DATE - interval '3 months') + interval '1 month')) AS segundo_mes,\n  SUM(lq.order_quantity) FILTER (WHERE lq.month_in_quarter = EXTRACT(MONTH FROM date_trunc('quarter', CURRENT_DATE - interval '3 months') + interval '2 month')) AS tercer_mes,\n  SUM(lq.order_quantity) AS total\nFROM\n  top_products tp\n  LEFT JOIN last_quarter lq ON tp.product_key = lq.product_key\nGROUP BY\n  producto, categoria, subcategoria\nORDER BY\n  total DESC;",
    "language": "ES"
  },
  {
    "user_query": "Show me the average shipping time, delivery time, and total order processing time in days for the last quarter.",
    "sql_query": "SELECT\n  AVG(DATE_PART('day', ship_date::TIMESTAMP - order_date::TIMESTAMP)) AS avg_shipping_time_days,\n  AVG(DATE_PART('day', due_date::TIMESTAMP - ship_date::TIMESTAMP)) AS avg_delivery_time_days,\n  AVG(DATE_PART('day', due_date::TIMESTAMP - order_date::TIMESTAMP)) AS avg_total_order_processing_time_days\nFROM\n  sales.fact_sales\nWHERE\n  order_date BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';",
    "language": "EN"
  },
  {
    "user_query": "Calculate the total quantity sold for road and mountain product lines.",
    "sql_query": "SELECT\n  dp.product_line,\n  SUM(fs.order_quantity) AS total_quantity_sold\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_product dp ON fs.product_key = dp.product_key\nWHERE\n  dp.product_line IN ('R', 'M')\nGROUP BY\n  dp.product_line\nORDER BY\n  total_quantity_sold DESC;",
    "language": "EN"
  },
  {
    "user_query": "Show the sales amount for each reseller during the first half of this year, along with their business type and compare it with the same period of the last year. Include only resellers whose sales this year were lower than the last year.",
    "sql_query": "SELECT\n  dr.reseller_name,\n  dr.business_type,\n  SUM(\n    CASE \n      WHEN fs.order_date >= DATE_TRUNC('year', CURRENT_DATE)\n          AND fs.order_date < DATE_TRUNC('year', CURRENT_DATE) + interval '6 months'\n      THEN fs.sales_amount\n      ELSE 0\n    END\n  ) AS total_sales_current_year_H1,\n  SUM(\n    CASE\n      WHEN fs.order_date >= DATE_TRUNC('year', CURRENT_DATE - interval '1 year')\n          AND fs.order_date < DATE_TRUNC('year', CURRENT_DATE - interval '1 year') + interval '6 months'\n      THEN fs.sales_amount\n      ELSE 0\n    END\n  ) AS total_sales_last_year_H1\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_reseller dr ON fs.reseller_key = dr.reseller_key\nWHERE\n  fs.sale_source = 'reseller_sales'\n  AND order_date >= DATE_TRUNC('year', CURRENT_DATE - interval '1 year')\n  AND fs.order_date < DATE_TRUNC('year', CURRENT_DATE) + interval '6 months'\nGROUP BY\n  dr.reseller_name, dr.business_type\nHAVING\n  SUM(\n    CASE \n      WHEN fs.order_date >= DATE_TRUNC('year', CURRENT_DATE)\n          AND fs.order_date < DATE_TRUNC('year', CURRENT_DATE) + interval '6 months'\n      THEN fs.sales_amount\n      ELSE 0\n    END\n  ) \n  < SUM(\n    CASE\n      WHEN fs.order_date >= DATE_TRUNC('year', CURRENT_DATE - interval '1 year')\n          AND fs.order_date < DATE_TRUNC('year', CURRENT_DATE - interval '1 year') + interval '6 months'\n      THEN fs.sales_amount\n      ELSE 0\n    END\n  )\nORDER BY\n  total_sales_current_year_H1 DESC;",
    "language": "EN"
  },
  {
    "user_query": "Calculate the gross margin and gross margin percentage for sales in the 'North America' sales territory group this quarter in course.",
    "sql_query": "SELECT\n  SUM(fs.sales_amount - fs.total_product_cost) AS gross_margin,\n  (SUM(fs.sales_amount - fs.total_product_cost) / NULLIF(SUM(fs.sales_amount), 0)) * 100 AS gross_margin_percentage\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_sales_territory dst ON fs.sales_territory_key = dst.sales_territory_key\nWHERE\n  dst.sales_territory_group = 'North America'\n  AND order_date BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) AND CURRENT_DATE;",
    "language": "EN"
  },
  {
    "user_query": "List the top 5 sales persons by total sales amount for B2B sales for the last half, detailed month by month.",
    "sql_query": "WITH\n  sales_last_half AS (\n    SELECT\n      dsp.employee_full_name AS employee,\n      TO_CHAR(fs.order_date, 'YYYY-MM') AS year_month,\n      SUM(fs.sales_amount) AS total_sales\n    FROM sales.fact_sales fs\n    JOIN sales.dim_sales_person dsp ON fs.employee_key = dsp.employee_key\n    WHERE fs.sale_source = 'reseller_sales'\n      AND (\n        (EXTRACT(MONTH FROM CURRENT_DATE) <= 6\n          AND fs.order_date >= date_trunc('year', CURRENT_DATE - interval '1 year') + interval '6 months'\n          AND fs.order_date < date_trunc('year', CURRENT_DATE)\n        )\n        OR\n        (EXTRACT(MONTH FROM CURRENT_DATE) > 6\n          AND fs.order_date >= date_trunc('year', CURRENT_DATE)\n          AND fs.order_date < date_trunc('year', CURRENT_DATE) + interval '6 months'\n        )\n      )\n    GROUP BY dsp.employee_full_name, year_month\n  ),\n  total_per_employee AS (\n    SELECT\n      employee,\n      SUM(total_sales) AS total_sales_semester\n    FROM sales_last_half\n    GROUP BY employee\n    ORDER BY total_sales_semester DESC\n    LIMIT 5\n  )\n\nSELECT\n  slh.employee,\n  slh.year_month,\n  slh.total_sales\nFROM\n  sales_last_half slh\n  JOIN total_per_employee tpe ON slh.employee = tpe.employee\nORDER BY\n  employee, year_month ASC;",
    "language": "EN"
  },
  {
    "user_query": "List all products that have a list price between 500 and 700. Show their name, category, subcategory and list price.",
    "sql_query": "SELECT\n  english_product_name AS product_name,\n  english_product_category_name AS category,\n  english_product_subcategory_name AS subcategory,\n  list_price\nFROM\n  sales.dim_product\nWHERE\n  list_price BETWEEN 500 AND 700;",
    "language": "EN"
  },
  {
    "user_query": "Calculate the sales amount, quantity sold, and cost of goods for the current year-to-date period, and same period last year comparission.",
    "sql_query": "SELECT\n  'Net Sales' AS metric,\n  SUM(\n    CASE\n      WHEN order_date >= date_trunc('year', CURRENT_DATE) AND order_date <= CURRENT_DATE\n      THEN sales_amount\n      ELSE 0\n    END\n  ) AS current_year_ytd,\n  SUM(\n    CASE\n      WHEN order_date >= date_trunc('year', CURRENT_DATE - interval '1 year') AND order_date <= (CURRENT_DATE - interval '1 year')\n      THEN sales_amount\n      ELSE 0\n    END\n  ) AS last_year_ytd\nFROM sales.fact_sales\n\nUNION ALL\n\nSELECT\n  'Quantity Sold' AS metric,\n  SUM(\n    CASE\n      WHEN order_date >= date_trunc('year', CURRENT_DATE) AND order_date <= CURRENT_DATE\n      THEN order_quantity\n      ELSE 0\n    END\n  ) AS current_year_ytd,\n  SUM(\n    CASE\n      WHEN order_date >= date_trunc('year', CURRENT_DATE - interval '1 year') AND order_date <= (CURRENT_DATE - interval '1 year')\n      THEN order_quantity\n      ELSE 0\n    END\n  ) AS last_year_ytd\nFROM sales.fact_sales\n\nUNION ALL\n\nSELECT\n  'COGS' AS metric,\n  SUM(\n    CASE\n      WHEN order_date >= date_trunc('year', CURRENT_DATE) AND order_date <= CURRENT_DATE\n      THEN total_product_cost\n      ELSE 0\n    END\n  ) AS current_year_ytd,\n  SUM(\n    CASE\n      WHEN order_date >= date_trunc('year', CURRENT_DATE - interval '1 year') AND order_date <= (CURRENT_DATE - interval '1 year')\n      THEN total_product_cost\n      ELSE 0\n    END\n  ) AS last_year_ytd\nFROM sales.fact_sales;",
    "language": "EN"
  },
  {
    "user_query": "Calculate the total quantity sold for each product line and product price tier for the second quarter of last year.",
    "sql_query": "SELECT\n  COALESCE(dp.product_line, '|| Not registered ||') AS product_line,\n  CASE\n    WHEN list_price >= 1000 THEN 'Premium'\n    WHEN list_price >= 200 AND list_price < 1000 THEN 'Standard'\n    ELSE 'Economic'\n  END AS product_price_tier,\n  SUM(fs.order_quantity) AS total_quantity_sold\nFROM\n  sales.fact_sales fs\n  JOIN sales.dim_product dp ON fs.product_key = dp.product_key\nWHERE\n  order_date >= DATE_TRUNC('year', CURRENT_DATE - interval '1 year') + interval '3 months'\n  AND order_date < DATE_TRUNC('year', CURRENT_DATE - interval '1 year') + interval '6 months'\nGROUP BY\n  product_line, product_price_tier\nORDER BY\n  product_line, total_quantity_sold DESC;",
    "language": "EN"
  },
  {
    "user_query": "Shows a list of the last 20 customers who made a purchase, along with their income and lifestyle segments.",
    "sql_query": "WITH\n  customer_last_order AS (\n    SELECT\n      customer_key,\n      MAX(sales_order_number) AS bigger_sales_order_number,\n      MAX(order_date) AS last_order_date\n    FROM\n      sales.fact_sales\n    WHERE\n      order_date <= CURRENT_DATE\n    GROUP BY\n      customer_key\n  )\n\nSELECT\n  dc.customer_full_name AS customer,\n  dc.yearly_income,\n  dc.house_owner,\n  dc.number_children_at_home,\n  CASE\n    WHEN dc.yearly_income >= 100000 THEN 'High Value'\n    WHEN dc.yearly_income >= 50000 AND dc.yearly_income < 100000 THEN 'Medium Value'\n    ELSE 'Basic Value'\n  END AS customer_income_segment,\n  CASE\n    WHEN dc.house_owner = TRUE AND dc.number_children_at_home > 0 THEN 'Owner Family'\n    WHEN dc.house_owner = TRUE AND dc.number_children_at_home = 0 THEN 'Owner No Childs'\n    WHEN dc.house_owner = FALSE AND dc.number_children_at_home > 0 THEN 'Tenant Family'\n    ELSE 'Tenant No Childs'\n  END AS customer_lifestyle_segment\nFROM\n  sales.dim_customer dc\n  JOIN customer_last_order clo ON dc.customer_key = clo.customer_key\nORDER BY\n  clo.last_order_date, clo.bigger_sales_order_number DESC\nLIMIT 20;",
    "language": "EN"
  },
  {
    "user_query": "Show me the top 10 best-selling products for the B2C segment over the last 6 months, excluding Accessories. Break down the sales amount month by month, and also include the category and subcategory each product belongs to.",
    "sql_query": "WITH \n  last_6_months AS (\n    SELECT\n      fs.product_key,\n      dp.english_product_name AS product_name,\n      dp.english_product_category_name AS category,\n      dp.english_product_subcategory_name AS subcategory,\n      EXTRACT(MONTH FROM fs.order_date) AS month_in_period,\n      fs.sales_amount\n    FROM\n      sales.fact_sales fs\n      JOIN sales.dim_product dp ON fs.product_key = dp.product_key\n    WHERE\n      fs.sale_source = 'internet_sales'\n      AND dp.english_product_category_name <> 'Accessories'\n      AND fs.order_date >= date_trunc('month', CURRENT_DATE) - interval '6 months'\n      AND fs.order_date < date_trunc('month', CURRENT_DATE)\n  ),\n  top_products AS (\n    SELECT\n      product_key,\n      product_name,\n      category,\n      subcategory,\n      SUM(sales_amount) AS total_sales\n    FROM\n      last_6_months\n    GROUP BY\n      product_key, product_name, category, subcategory\n    ORDER BY\n      total_sales DESC\n    LIMIT 10\n  )\n\nSELECT\n  tp.product_name AS product,\n  tp.category,\n  tp.subcategory,\n  SUM(lq.sales_amount) FILTER (\n      WHERE lq.month_in_period = EXTRACT(MONTH FROM date_trunc('month', CURRENT_DATE) - interval '6 months')\n  ) AS first_month,\n  SUM(lq.sales_amount) FILTER (\n      WHERE lq.month_in_period = EXTRACT(MONTH FROM date_trunc('month', CURRENT_DATE) - interval '5 months')\n  ) AS second_month,\n  SUM(lq.sales_amount) FILTER (\n      WHERE lq.month_in_period = EXTRACT(MONTH FROM date_trunc('month', CURRENT_DATE) - interval '4 months')\n  ) AS third_month,\n  SUM(lq.sales_amount) FILTER (\n      WHERE lq.month_in_period = EXTRACT(MONTH FROM date_trunc('month', CURRENT_DATE) - interval '3 months')\n  ) AS fourth_month,\n  SUM(lq.sales_amount) FILTER (\n      WHERE lq.month_in_period = EXTRACT(MONTH FROM date_trunc('month', CURRENT_DATE) - interval '2 month')\n  ) AS fifth_month,\n  SUM(lq.sales_amount) FILTER (\n      WHERE lq.month_in_period = EXTRACT(MONTH FROM date_trunc('month', CURRENT_DATE) - interval '1 month')\n  ) AS sixth_month,\n  SUM(lq.sales_amount) AS total_sales\nFROM\n  top_products tp\n  LEFT JOIN last_6_months lq ON tp.product_key = lq.product_key\nGROUP BY\n  tp.product_name, tp.category, tp.subcategory\nORDER BY\n  total_sales DESC;",
    "language": "EN"
  }
]